/*
 * This Scala source file was generated by the Gradle 'init' task.
 */
package taller
import org.scalameter._

object App {
  def main(args: Array[String]): Unit = {
    println(greeting())

    val multiplicar = new MultiplicarMatrices
    val m1 = multiplicar.matrizAlAzar(25, 25)
    val m2 = multiplicar.matrizAlAzar(25, 25)
    println("Matriz 1: " , m1)
    println("Matriz 2: " , m2)
    println("----------------------------------------------------------------")
    println("Matriz Resultante: " , multiplicar.multMatriz(m1, m2))
    println(withWarmer(new Warmer.Default) measure {(1 to 10000000).toArray})
    
    println("----------------------------------------------------------------")
    
    val multiplicarParalelas = new MultiplicarMatricesParalelas
    val m1p = multiplicarParalelas.matrizAlAzar(25, 25)
    val m2p = multiplicarParalelas.matrizAlAzar(25, 25)
    println("Matriz 1: " , m1p)
    println("Matriz 2: " , m2p)
    println("----------------------------------------------------------------")
    println("Matriz Resultante: " , multiplicarParalelas.multMatriz(m1p, m2p))
    println(withWarmer(new Warmer.Default) measure {(1 to 10000000).toArray})

    println("----------------------------------------------------------------")

    val multiplicarMatricesRec = new MultiplicarMatricesRec
    val matriz1 = multiplicarMatricesRec.matrizAlAzar(2, 10) // Matriz 2x2 con valores aleatorios
    val matriz2 = multiplicarMatricesRec.matrizAlAzar(2, 10) // Otra matriz 2x2
    val resultadoRecursivo = multiplicarMatricesRec.multMatrizRec(matriz1, matriz2)

    println("\nResultado de la multiplicación recursiva:")
    resultadoRecursivo.foreach(println)
    println(withWarmer(new Warmer.Default) measure {(1 to 10000000).toArray})

    println("----------------------------------------------------------------")

    val multiplicarMatricesRecPar = new MultiplicarMatricesRecParalelas
    val matriz1p = multiplicarMatricesRec.matrizAlAzar(2, 10) // Matriz 2x2 con valores aleatorios
    val matriz2p = multiplicarMatricesRec.matrizAlAzar(2, 10) // Otra matriz 2x2
    val resultadoRecursivoP = multiplicarMatricesRecPar.multMatrizRecPar(matriz1, matriz2)

    println("\nResultado de la multiplicación recursiva paralelo:")
    resultadoRecursivo.foreach(println)
    println(withWarmer(new Warmer.Default) measure {(1 to 10000000).toArray})


  }

  def greeting(): String = "Hello, world!"
}
